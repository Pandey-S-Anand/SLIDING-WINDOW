/* Bruteforce Approach :
The idea is to generate all subsets of size m of arr[0..n-1]. 
For every subset, find the difference between the maximum and minimum elements in it. Finally, return the minimum difference.
*/

class Solution {
    public long findMinDiff(ArrayList<Integer> arr, int n, int numberOfStudents) {
        List<List<Integer>> subsets = findSubsets(arr);
        long minDifference = Long.MAX_VALUE;

        for (List<Integer> subset : subsets) {
            if (subset.size() == numberOfStudents) { // Only consider subsets of size 'numberOfStudents'
                // Find maximum and minimum chocolates/values in the current subset and update the minimum difference .
                minDifference = Math.min(minDifference, (long) (Collections.max(subset) - Collections.min(subset)));
            }
        }

        return minDifference;
    }

    private List<List<Integer>> findSubsets(List<Integer> arr) {
        List<List<Integer>> subsets = new ArrayList<>();
        generateSubsets(arr, 0, new ArrayList<>(), subsets);
        return subsets;
    }

    private void generateSubsets(List<Integer> arr, int index, List<Integer> subset, List<List<Integer>> subsets) {
        if (index == arr.size()) {
            subsets.add(new ArrayList<>(subset));
        } else {
            // Include element
            subset.add(arr.get(index));
            generateSubsets(arr, index + 1, subset, subsets);
            // Exclude Element
            subset.remove(subset.size() - 1);
            generateSubsets(arr, index + 1, subset, subsets);
        }
    }
}


//Better Approach

class Solution {
    public long findMinDiff(ArrayList<Integer> arr, int n, int numberOfStudents) {
        List<List<Integer>> subsets = findSubsetsOfSizeK(arr, numberOfStudents);
        long minDifference = Long.MAX_VALUE;

        for (List<Integer> subset : subsets) {
            // Find maximum and minimum chocolates/values in the current subset and update the minimum difference .
            minDifference = Math.min(minDifference, (long) (Collections.max(subset) - Collections.min(subset)));
        }

        return minDifference;
    }

    private List<List<Integer>> findSubsetsOfSizeK(List<Integer> arr, int k) {
        List<List<Integer>> subsets = new ArrayList<>();
        generateSubsets(arr, 0, new ArrayList<>(), subsets, k);
        return subsets;
    }

    private void generateSubsets(List<Integer> arr, int index, List<Integer> subset, List<List<Integer>> subsets, int k) {
        if (subset.size() == k) {
            subsets.add(new ArrayList<>(subset));
            return;
        }
        if (index == arr.size()) {
            return;
        }

        // Include element
        subset.add(arr.get(index));
        generateSubsets(arr, index + 1, subset, subsets, k);

        // Exclude element
        subset.remove(subset.size() - 1);
        generateSubsets(arr, index + 1, subset, subsets, k);
    }
}



//Optimal Approach

class Solution {
    public long findMinDiff(ArrayList<Integer> arr, int n, int numberOfStudents) {
        long minimumDifference = Long.MAX_VALUE;
        /*
         * When the array is sorted, any subset of a fixed size (i.e 'numberOfStudents')
         * will have its minimum element at the beginning of the subset and its maximum
         * element at the end.Without sorting, the maximum and minimum values within any
         * window would require scanning the entire window each time to determine these
         * values, leading to higher complexity.
         */
        Collections.sort(arr);
        // Create a window of size 'numberOfStudents'
        int start = 0, end = numberOfStudents - 1;

        /*
         * Use a sliding window to find the difference between the maximum and minimum
         * values in every window of size 'numberOfStudents'
         */
        while (start <= (n - numberOfStudents)) {
            int currentDifference = arr.get(end) - arr.get(start);
            minimumDifference = Math.min(currentDifference, minimumDifference);

            start++;
            end++;
        }

        return minimumDifference;
    }
}
